// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package my_queries

import (
	"context"
	"database/sql"

	"github.com/ronishg27/rfid_attendance/internal/models/public"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newActionLog(db *gorm.DB, opts ...gen.DOOption) actionLog {
	_actionLog := actionLog{}

	_actionLog.actionLogDo.UseDB(db, opts...)
	_actionLog.actionLogDo.UseModel(&public.ActionLog{})

	tableName := _actionLog.actionLogDo.TableName()
	_actionLog.ALL = field.NewAsterisk(tableName)
	_actionLog.ID = field.NewString(tableName, "id")
	_actionLog.UserId = field.NewString(tableName, "user_id")
	_actionLog.UserType = field.NewString(tableName, "user_type")
	_actionLog.Action = field.NewString(tableName, "action")
	_actionLog.TargetType = field.NewString(tableName, "target_type")
	_actionLog.TargetId = field.NewString(tableName, "target_id")
	_actionLog.OrganizationID = field.NewString(tableName, "organization_id")
	_actionLog.IPAddress = field.NewString(tableName, "ip_address")
	_actionLog.Location = field.NewString(tableName, "location")
	_actionLog.UserAgent = field.NewString(tableName, "user_agent")
	_actionLog.ExtraData = field.NewField(tableName, "extra_data")
	_actionLog.Message = field.NewString(tableName, "message")
	_actionLog.IsSuccess = field.NewBool(tableName, "is_success")
	_actionLog.CreatedAt = field.NewTime(tableName, "created_at")

	_actionLog.fillFieldMap()

	return _actionLog
}

type actionLog struct {
	actionLogDo

	ALL            field.Asterisk
	ID             field.String
	UserId         field.String
	UserType       field.String
	Action         field.String
	TargetType     field.String
	TargetId       field.String
	OrganizationID field.String
	IPAddress      field.String
	Location       field.String
	UserAgent      field.String
	ExtraData      field.Field
	Message        field.String
	IsSuccess      field.Bool
	CreatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (a actionLog) Table(newTableName string) *actionLog {
	a.actionLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a actionLog) As(alias string) *actionLog {
	a.actionLogDo.DO = *(a.actionLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *actionLog) updateTableName(table string) *actionLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.UserId = field.NewString(table, "user_id")
	a.UserType = field.NewString(table, "user_type")
	a.Action = field.NewString(table, "action")
	a.TargetType = field.NewString(table, "target_type")
	a.TargetId = field.NewString(table, "target_id")
	a.OrganizationID = field.NewString(table, "organization_id")
	a.IPAddress = field.NewString(table, "ip_address")
	a.Location = field.NewString(table, "location")
	a.UserAgent = field.NewString(table, "user_agent")
	a.ExtraData = field.NewField(table, "extra_data")
	a.Message = field.NewString(table, "message")
	a.IsSuccess = field.NewBool(table, "is_success")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *actionLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *actionLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["user_id"] = a.UserId
	a.fieldMap["user_type"] = a.UserType
	a.fieldMap["action"] = a.Action
	a.fieldMap["target_type"] = a.TargetType
	a.fieldMap["target_id"] = a.TargetId
	a.fieldMap["organization_id"] = a.OrganizationID
	a.fieldMap["ip_address"] = a.IPAddress
	a.fieldMap["location"] = a.Location
	a.fieldMap["user_agent"] = a.UserAgent
	a.fieldMap["extra_data"] = a.ExtraData
	a.fieldMap["message"] = a.Message
	a.fieldMap["is_success"] = a.IsSuccess
	a.fieldMap["created_at"] = a.CreatedAt
}

func (a actionLog) clone(db *gorm.DB) actionLog {
	a.actionLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a actionLog) replaceDB(db *gorm.DB) actionLog {
	a.actionLogDo.ReplaceDB(db)
	return a
}

type actionLogDo struct{ gen.DO }

type IActionLogDo interface {
	gen.SubQuery
	Debug() IActionLogDo
	WithContext(ctx context.Context) IActionLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IActionLogDo
	WriteDB() IActionLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IActionLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IActionLogDo
	Not(conds ...gen.Condition) IActionLogDo
	Or(conds ...gen.Condition) IActionLogDo
	Select(conds ...field.Expr) IActionLogDo
	Where(conds ...gen.Condition) IActionLogDo
	Order(conds ...field.Expr) IActionLogDo
	Distinct(cols ...field.Expr) IActionLogDo
	Omit(cols ...field.Expr) IActionLogDo
	Join(table schema.Tabler, on ...field.Expr) IActionLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IActionLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IActionLogDo
	Group(cols ...field.Expr) IActionLogDo
	Having(conds ...gen.Condition) IActionLogDo
	Limit(limit int) IActionLogDo
	Offset(offset int) IActionLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IActionLogDo
	Unscoped() IActionLogDo
	Create(values ...*public.ActionLog) error
	CreateInBatches(values []*public.ActionLog, batchSize int) error
	Save(values ...*public.ActionLog) error
	First() (*public.ActionLog, error)
	Take() (*public.ActionLog, error)
	Last() (*public.ActionLog, error)
	Find() ([]*public.ActionLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*public.ActionLog, err error)
	FindInBatches(result *[]*public.ActionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*public.ActionLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IActionLogDo
	Assign(attrs ...field.AssignExpr) IActionLogDo
	Joins(fields ...field.RelationField) IActionLogDo
	Preload(fields ...field.RelationField) IActionLogDo
	FirstOrInit() (*public.ActionLog, error)
	FirstOrCreate() (*public.ActionLog, error)
	FindByPage(offset int, limit int) (result []*public.ActionLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IActionLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a actionLogDo) Debug() IActionLogDo {
	return a.withDO(a.DO.Debug())
}

func (a actionLogDo) WithContext(ctx context.Context) IActionLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a actionLogDo) ReadDB() IActionLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a actionLogDo) WriteDB() IActionLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a actionLogDo) Session(config *gorm.Session) IActionLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a actionLogDo) Clauses(conds ...clause.Expression) IActionLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a actionLogDo) Returning(value interface{}, columns ...string) IActionLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a actionLogDo) Not(conds ...gen.Condition) IActionLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a actionLogDo) Or(conds ...gen.Condition) IActionLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a actionLogDo) Select(conds ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a actionLogDo) Where(conds ...gen.Condition) IActionLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a actionLogDo) Order(conds ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a actionLogDo) Distinct(cols ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a actionLogDo) Omit(cols ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a actionLogDo) Join(table schema.Tabler, on ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a actionLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a actionLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a actionLogDo) Group(cols ...field.Expr) IActionLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a actionLogDo) Having(conds ...gen.Condition) IActionLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a actionLogDo) Limit(limit int) IActionLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a actionLogDo) Offset(offset int) IActionLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a actionLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IActionLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a actionLogDo) Unscoped() IActionLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a actionLogDo) Create(values ...*public.ActionLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a actionLogDo) CreateInBatches(values []*public.ActionLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a actionLogDo) Save(values ...*public.ActionLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a actionLogDo) First() (*public.ActionLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*public.ActionLog), nil
	}
}

func (a actionLogDo) Take() (*public.ActionLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*public.ActionLog), nil
	}
}

func (a actionLogDo) Last() (*public.ActionLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*public.ActionLog), nil
	}
}

func (a actionLogDo) Find() ([]*public.ActionLog, error) {
	result, err := a.DO.Find()
	return result.([]*public.ActionLog), err
}

func (a actionLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*public.ActionLog, err error) {
	buf := make([]*public.ActionLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a actionLogDo) FindInBatches(result *[]*public.ActionLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a actionLogDo) Attrs(attrs ...field.AssignExpr) IActionLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a actionLogDo) Assign(attrs ...field.AssignExpr) IActionLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a actionLogDo) Joins(fields ...field.RelationField) IActionLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a actionLogDo) Preload(fields ...field.RelationField) IActionLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a actionLogDo) FirstOrInit() (*public.ActionLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*public.ActionLog), nil
	}
}

func (a actionLogDo) FirstOrCreate() (*public.ActionLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*public.ActionLog), nil
	}
}

func (a actionLogDo) FindByPage(offset int, limit int) (result []*public.ActionLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a actionLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a actionLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a actionLogDo) Delete(models ...*public.ActionLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *actionLogDo) withDO(do gen.Dao) *actionLogDo {
	a.DO = *do.(*gen.DO)
	return a
}
