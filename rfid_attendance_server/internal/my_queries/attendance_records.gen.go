// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package my_queries

import (
	"context"
	"database/sql"

	"github.com/ronishg27/rfid_attendance/internal/models/tenant"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAttendanceRecord(db *gorm.DB, opts ...gen.DOOption) attendanceRecord {
	_attendanceRecord := attendanceRecord{}

	_attendanceRecord.attendanceRecordDo.UseDB(db, opts...)
	_attendanceRecord.attendanceRecordDo.UseModel(&tenant.AttendanceRecord{})

	tableName := _attendanceRecord.attendanceRecordDo.TableName()
	_attendanceRecord.ALL = field.NewAsterisk(tableName)
	_attendanceRecord.ID = field.NewString(tableName, "id")
	_attendanceRecord.MemberID = field.NewString(tableName, "member_id")
	_attendanceRecord.CheckIn = field.NewTime(tableName, "check_in")
	_attendanceRecord.CheckOut = field.NewTime(tableName, "check_out")
	_attendanceRecord.Day = field.NewTime(tableName, "day")
	_attendanceRecord.Status = field.NewString(tableName, "status")
	_attendanceRecord.UpdatedBy = field.NewString(tableName, "updated_by")
	_attendanceRecord.UpdatedByType = field.NewString(tableName, "updated_by_type")

	_attendanceRecord.fillFieldMap()

	return _attendanceRecord
}

type attendanceRecord struct {
	attendanceRecordDo

	ALL           field.Asterisk
	ID            field.String
	MemberID      field.String
	CheckIn       field.Time
	CheckOut      field.Time
	Day           field.Time
	Status        field.String
	UpdatedBy     field.String
	UpdatedByType field.String

	fieldMap map[string]field.Expr
}

func (a attendanceRecord) Table(newTableName string) *attendanceRecord {
	a.attendanceRecordDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attendanceRecord) As(alias string) *attendanceRecord {
	a.attendanceRecordDo.DO = *(a.attendanceRecordDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attendanceRecord) updateTableName(table string) *attendanceRecord {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.MemberID = field.NewString(table, "member_id")
	a.CheckIn = field.NewTime(table, "check_in")
	a.CheckOut = field.NewTime(table, "check_out")
	a.Day = field.NewTime(table, "day")
	a.Status = field.NewString(table, "status")
	a.UpdatedBy = field.NewString(table, "updated_by")
	a.UpdatedByType = field.NewString(table, "updated_by_type")

	a.fillFieldMap()

	return a
}

func (a *attendanceRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attendanceRecord) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["id"] = a.ID
	a.fieldMap["member_id"] = a.MemberID
	a.fieldMap["check_in"] = a.CheckIn
	a.fieldMap["check_out"] = a.CheckOut
	a.fieldMap["day"] = a.Day
	a.fieldMap["status"] = a.Status
	a.fieldMap["updated_by"] = a.UpdatedBy
	a.fieldMap["updated_by_type"] = a.UpdatedByType
}

func (a attendanceRecord) clone(db *gorm.DB) attendanceRecord {
	a.attendanceRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attendanceRecord) replaceDB(db *gorm.DB) attendanceRecord {
	a.attendanceRecordDo.ReplaceDB(db)
	return a
}

type attendanceRecordDo struct{ gen.DO }

type IAttendanceRecordDo interface {
	gen.SubQuery
	Debug() IAttendanceRecordDo
	WithContext(ctx context.Context) IAttendanceRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttendanceRecordDo
	WriteDB() IAttendanceRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttendanceRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttendanceRecordDo
	Not(conds ...gen.Condition) IAttendanceRecordDo
	Or(conds ...gen.Condition) IAttendanceRecordDo
	Select(conds ...field.Expr) IAttendanceRecordDo
	Where(conds ...gen.Condition) IAttendanceRecordDo
	Order(conds ...field.Expr) IAttendanceRecordDo
	Distinct(cols ...field.Expr) IAttendanceRecordDo
	Omit(cols ...field.Expr) IAttendanceRecordDo
	Join(table schema.Tabler, on ...field.Expr) IAttendanceRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceRecordDo
	Group(cols ...field.Expr) IAttendanceRecordDo
	Having(conds ...gen.Condition) IAttendanceRecordDo
	Limit(limit int) IAttendanceRecordDo
	Offset(offset int) IAttendanceRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceRecordDo
	Unscoped() IAttendanceRecordDo
	Create(values ...*tenant.AttendanceRecord) error
	CreateInBatches(values []*tenant.AttendanceRecord, batchSize int) error
	Save(values ...*tenant.AttendanceRecord) error
	First() (*tenant.AttendanceRecord, error)
	Take() (*tenant.AttendanceRecord, error)
	Last() (*tenant.AttendanceRecord, error)
	Find() ([]*tenant.AttendanceRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*tenant.AttendanceRecord, err error)
	FindInBatches(result *[]*tenant.AttendanceRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*tenant.AttendanceRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttendanceRecordDo
	Assign(attrs ...field.AssignExpr) IAttendanceRecordDo
	Joins(fields ...field.RelationField) IAttendanceRecordDo
	Preload(fields ...field.RelationField) IAttendanceRecordDo
	FirstOrInit() (*tenant.AttendanceRecord, error)
	FirstOrCreate() (*tenant.AttendanceRecord, error)
	FindByPage(offset int, limit int) (result []*tenant.AttendanceRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttendanceRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attendanceRecordDo) Debug() IAttendanceRecordDo {
	return a.withDO(a.DO.Debug())
}

func (a attendanceRecordDo) WithContext(ctx context.Context) IAttendanceRecordDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attendanceRecordDo) ReadDB() IAttendanceRecordDo {
	return a.Clauses(dbresolver.Read)
}

func (a attendanceRecordDo) WriteDB() IAttendanceRecordDo {
	return a.Clauses(dbresolver.Write)
}

func (a attendanceRecordDo) Session(config *gorm.Session) IAttendanceRecordDo {
	return a.withDO(a.DO.Session(config))
}

func (a attendanceRecordDo) Clauses(conds ...clause.Expression) IAttendanceRecordDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attendanceRecordDo) Returning(value interface{}, columns ...string) IAttendanceRecordDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attendanceRecordDo) Not(conds ...gen.Condition) IAttendanceRecordDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attendanceRecordDo) Or(conds ...gen.Condition) IAttendanceRecordDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attendanceRecordDo) Select(conds ...field.Expr) IAttendanceRecordDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attendanceRecordDo) Where(conds ...gen.Condition) IAttendanceRecordDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attendanceRecordDo) Order(conds ...field.Expr) IAttendanceRecordDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attendanceRecordDo) Distinct(cols ...field.Expr) IAttendanceRecordDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attendanceRecordDo) Omit(cols ...field.Expr) IAttendanceRecordDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attendanceRecordDo) Join(table schema.Tabler, on ...field.Expr) IAttendanceRecordDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attendanceRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttendanceRecordDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attendanceRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttendanceRecordDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attendanceRecordDo) Group(cols ...field.Expr) IAttendanceRecordDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attendanceRecordDo) Having(conds ...gen.Condition) IAttendanceRecordDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attendanceRecordDo) Limit(limit int) IAttendanceRecordDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attendanceRecordDo) Offset(offset int) IAttendanceRecordDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attendanceRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttendanceRecordDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attendanceRecordDo) Unscoped() IAttendanceRecordDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attendanceRecordDo) Create(values ...*tenant.AttendanceRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attendanceRecordDo) CreateInBatches(values []*tenant.AttendanceRecord, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attendanceRecordDo) Save(values ...*tenant.AttendanceRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attendanceRecordDo) First() (*tenant.AttendanceRecord, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttendanceRecord), nil
	}
}

func (a attendanceRecordDo) Take() (*tenant.AttendanceRecord, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttendanceRecord), nil
	}
}

func (a attendanceRecordDo) Last() (*tenant.AttendanceRecord, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttendanceRecord), nil
	}
}

func (a attendanceRecordDo) Find() ([]*tenant.AttendanceRecord, error) {
	result, err := a.DO.Find()
	return result.([]*tenant.AttendanceRecord), err
}

func (a attendanceRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*tenant.AttendanceRecord, err error) {
	buf := make([]*tenant.AttendanceRecord, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attendanceRecordDo) FindInBatches(result *[]*tenant.AttendanceRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attendanceRecordDo) Attrs(attrs ...field.AssignExpr) IAttendanceRecordDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attendanceRecordDo) Assign(attrs ...field.AssignExpr) IAttendanceRecordDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attendanceRecordDo) Joins(fields ...field.RelationField) IAttendanceRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attendanceRecordDo) Preload(fields ...field.RelationField) IAttendanceRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attendanceRecordDo) FirstOrInit() (*tenant.AttendanceRecord, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttendanceRecord), nil
	}
}

func (a attendanceRecordDo) FirstOrCreate() (*tenant.AttendanceRecord, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*tenant.AttendanceRecord), nil
	}
}

func (a attendanceRecordDo) FindByPage(offset int, limit int) (result []*tenant.AttendanceRecord, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attendanceRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attendanceRecordDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attendanceRecordDo) Delete(models ...*tenant.AttendanceRecord) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attendanceRecordDo) withDO(do gen.Dao) *attendanceRecordDo {
	a.DO = *do.(*gen.DO)
	return a
}
