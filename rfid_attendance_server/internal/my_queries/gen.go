// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package my_queries

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	ActionLog        *actionLog
	AttendanceRecord *attendanceRecord
	Device           *device
	Member           *member
	Organization     *organization
	Role             *role
	ScanLog          *scanLog
	Shift            *shift
	SuperAdmin       *superAdmin
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	ActionLog = &Q.ActionLog
	AttendanceRecord = &Q.AttendanceRecord
	Device = &Q.Device
	Member = &Q.Member
	Organization = &Q.Organization
	Role = &Q.Role
	ScanLog = &Q.ScanLog
	Shift = &Q.Shift
	SuperAdmin = &Q.SuperAdmin
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		ActionLog:        newActionLog(db, opts...),
		AttendanceRecord: newAttendanceRecord(db, opts...),
		Device:           newDevice(db, opts...),
		Member:           newMember(db, opts...),
		Organization:     newOrganization(db, opts...),
		Role:             newRole(db, opts...),
		ScanLog:          newScanLog(db, opts...),
		Shift:            newShift(db, opts...),
		SuperAdmin:       newSuperAdmin(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	ActionLog        actionLog
	AttendanceRecord attendanceRecord
	Device           device
	Member           member
	Organization     organization
	Role             role
	ScanLog          scanLog
	Shift            shift
	SuperAdmin       superAdmin
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		ActionLog:        q.ActionLog.clone(db),
		AttendanceRecord: q.AttendanceRecord.clone(db),
		Device:           q.Device.clone(db),
		Member:           q.Member.clone(db),
		Organization:     q.Organization.clone(db),
		Role:             q.Role.clone(db),
		ScanLog:          q.ScanLog.clone(db),
		Shift:            q.Shift.clone(db),
		SuperAdmin:       q.SuperAdmin.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		ActionLog:        q.ActionLog.replaceDB(db),
		AttendanceRecord: q.AttendanceRecord.replaceDB(db),
		Device:           q.Device.replaceDB(db),
		Member:           q.Member.replaceDB(db),
		Organization:     q.Organization.replaceDB(db),
		Role:             q.Role.replaceDB(db),
		ScanLog:          q.ScanLog.replaceDB(db),
		Shift:            q.Shift.replaceDB(db),
		SuperAdmin:       q.SuperAdmin.replaceDB(db),
	}
}

type queryCtx struct {
	ActionLog        IActionLogDo
	AttendanceRecord IAttendanceRecordDo
	Device           IDeviceDo
	Member           IMemberDo
	Organization     IOrganizationDo
	Role             IRoleDo
	ScanLog          IScanLogDo
	Shift            IShiftDo
	SuperAdmin       ISuperAdminDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		ActionLog:        q.ActionLog.WithContext(ctx),
		AttendanceRecord: q.AttendanceRecord.WithContext(ctx),
		Device:           q.Device.WithContext(ctx),
		Member:           q.Member.WithContext(ctx),
		Organization:     q.Organization.WithContext(ctx),
		Role:             q.Role.WithContext(ctx),
		ScanLog:          q.ScanLog.WithContext(ctx),
		Shift:            q.Shift.WithContext(ctx),
		SuperAdmin:       q.SuperAdmin.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
